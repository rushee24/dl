\#Import required dependencies
%matplotlib inline
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
from keras.utils import to_categorical
from keras import models
from keras import layers




#Downloading the IMDB dataset
from keras.datasets import imdb
(training_data, training_targets),(testing_data,testing_targets)=imdb.load_data(num_words=10000)
data=np.concatenate((training_data,testing_data),axis=0)
targets=np.concatenate((training_targets,testing_targets),axis=0)

#Explore the data
print("Categories:",np.unique(targets))
print("Number of unique words:", len(np.unique(np.hstack(data))))

length=[len(i) for i in data]
print("Average Review length:", np.mean(length))
print("Standard Deviation:",round(np.std(length)))


#Single training example
print("Label:",targets[0])


print(data[0])

#Retrieves the dictionary mapping word indices back into original words
index=imdb.get_word_index()
reverse_index=dict([(value,key) for (key,value) in index.items()])
decoded=" ".join([reverse_index.get(i-3,"#") for i in data[0]])
print(decoded)

#Data Preparation
def vectorize(sequences,dimension=10000):
    results=np.zeros((len(sequences),dimension))
    for i, sequence in enumerate(sequences):
        results[i,sequence]=1
    return results

data=vectorize(data)
targets=np.array(targets).astype("float32")


#Split data into training and testing set
test_x = data[:10000]
test_y = targets[:10000]
train_x = data[10000:]
train_y = targets[10000:]


#Building and Training the model
model = models.Sequential()
# Input - Layer
model.add(layers.Dense(50, activation = "relu", input_shape=(10000, )))
# Hidden - Layers
model.add(layers.Dropout(0.3, noise_shape=None, seed=None))
model.add(layers.Dense(50, activation = "relu"))
model.add(layers.Dropout(0.2, noise_shape=None, seed=None))
model.add(layers.Dense(50, activation = "relu"))
# Output- Layer
model.add(layers.Dense(1, activation = "sigmoid"))
model.summary()



#Compile the model
model.compile(
optimizer = "adam",
loss = "binary_crossentropy",
metrics = ["accuracy"]
)


#Batch size and epochs
results = model.fit(
train_x, train_y,
epochs= 2,
batch_size = 500,
validation_data = (test_x, test_y)
)


#Evaluate the model
print(np.mean(results.history["val_accuracy"]))